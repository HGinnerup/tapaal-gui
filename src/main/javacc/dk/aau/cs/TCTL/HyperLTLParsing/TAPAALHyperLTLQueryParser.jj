options {
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 2;
    OTHER_AMBIGUITY_CHECK = 1;
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    ERROR_REPORTING = true;
    JAVA_UNICODE_ESCAPE = false;
    UNICODE_INPUT = false;
    IGNORE_CASE = false;
    USER_TOKEN_MANAGER = false;
    USER_CHAR_STREAM = false;
    BUILD_PARSER = true;
    BUILD_TOKEN_MANAGER = true;
    SANITY_CHECK = true;
    }

    PARSER_BEGIN(TAPAALHyperLTLQueryParser)

    package dk.aau.cs.TCTL.HyperLTLParsing;

import java.io.StringReader;
import java.util.ArrayList;

import dk.aau.cs.TCTL.*;

public class TAPAALHyperLTLQueryParser {

    private static final String ERROR_PARSING_QUERY_MESSAGE = "TAPAAL countered an error trying to parse the query";

    public static TCTLAbstractPathProperty parse(String query) throws ParseException {
        TAPAALHyperLTLQueryParser parser = new TAPAALHyperLTLQueryParser(new StringReader(query));
        return parser.Start();
    }
}

    PARSER_END(TAPAALHyperLTLQueryParser)

TOKEN :
    {
<TRUE: "true" | "TRUE">
    |
<FALSE: "false" | "FALSE">
    }

    TOKEN :
    {
<A: "A">
    |
<E: "E">
    |
<U: "U">
    |
<F: "F">
    |
<G: "G">
    |
<X: "X">
    }

    TOKEN :
    {
<OR: "or" | "||">
    |
<AND: "and" | "&&">
    |
<NOT: "not" | "!">
    }

    TOKEN :
    {
<PLUS: "+">
    |
<MINUS: "-">
    |
<MULT: "*">
    }

    TOKEN :
    {
< NUM: ("-")? ( ["0"-"9"] )+ >
    |
<IDENT: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
    }

    TOKEN :
    {
<OP: "<" | "!=" | "<=" | ">" | "=" | "==" | ">=" | ">" >
    }

    SKIP :
    {
    " "
    | "\t"
    | "\n"
    | "\r"
    }

/** Root production. */
TCTLAbstractPathProperty Start() :
{
        TCTLAbstractPathProperty child = null;
}
{
   child = AbstractPathProperty() <EOF> {return child; }
}

TCTLAbstractPathProperty AbstractPathProperty() :
{
        TCTLAbstractPathProperty pathChild = null;
}
{
    pathChild = AllPathProperty() {return pathChild;}
    | pathChild = ExistsPathProperty() {return pathChild;}
}

TCTLAbstractPathProperty AllPathProperty() :
{
        TCTLAbstractPathProperty pathChild = null;
        Token trace;
}
{
    <A> trace = <IDENT> ("(")? pathChild = ParanthesesExpr() (")")? {return new LTLANode(new TCTLPathToStateConverter(pathChild), trace.image); }
}

TCTLAbstractPathProperty ExistsPathProperty() :
{
        TCTLAbstractPathProperty pathChild = null;
        Token trace;
}
{
    <E> trace = <IDENT> ("(")? pathChild = ParanthesesExpr() (")")? {return new LTLENode(new TCTLPathToStateConverter(pathChild), trace.image); }
}

TCTLAbstractPathProperty ParanthesesExpr() :
{
    TCTLAbstractPathProperty pathChild = null;
    TCTLAbstractStateProperty stateChild = null;
    TCTLAbstractStateProperty stateChild2 = null;
}
{

    pathChild = AbstractPathProperty() {return pathChild;}
    | "(" pathChild = QuantifierExpr() ")" {return pathChild;}
    | stateChild = OrExpr() [LOOKAHEAD(2) <U> stateChild2 = OrExpr()] { return (stateChild2 == null ? new TCTLStateToPathConverter(stateChild) : new LTLUNode(stateChild, stateChild2)); }
}

TCTLAbstractPathProperty QuantifierExpr() :
{
    TCTLAbstractStateProperty child = null;
    TCTLAbstractStateProperty child2 = null;
}
{

    <F> child = OrExpr() {return new LTLFNode(child); }
    | <G> child = OrExpr() {return new LTLGNode(child); }
    | <X> child = OrExpr() {return new LTLXNode(child); }
    | child = OrExpr() [LOOKAHEAD(2) <U> child2 = OrExpr()] { return (child2 == null ? new TCTLStateToPathConverter(child) : new LTLUNode(child, child2)); }
}


TCTLAbstractStateProperty OrExpr() :
{
    TCTLAbstractStateProperty currentChild;
    ArrayList<TCTLAbstractStateProperty> disjunctions = new ArrayList<TCTLAbstractStateProperty>();
}
{
    currentChild = AndExpr()
    { disjunctions.add(currentChild); }
    (
    <OR> currentChild = AndExpr()
    { disjunctions.add(currentChild); }
    )*
    { return disjunctions.size() == 1 ? currentChild : new TCTLOrListNode(disjunctions); }
}

TCTLAbstractStateProperty AndExpr() :
{
    TCTLAbstractStateProperty currentChild;
    ArrayList<TCTLAbstractStateProperty> conjunctions = new ArrayList<TCTLAbstractStateProperty>();
}
{
    currentChild = NotExpr()
    { conjunctions.add(currentChild); }
    (
    <AND> currentChild = NotExpr()
    { conjunctions.add(currentChild); }
    )*
    { return conjunctions.size() == 1 ? currentChild : new TCTLAndListNode(conjunctions); }
}

TCTLAbstractStateProperty NotExpr() :
{
    TCTLAbstractStateProperty child;
    TCTLAbstractStateProperty child2 = null;
    TCTLAbstractPathProperty childConverter;
}
{
    <NOT> "(" child = OrExpr() [LOOKAHEAD(2) <U> child2 = OrExpr()] ")" { return new TCTLNotNode(child2 == null ? child : new TCTLPathToStateConverter(new LTLUNode(child, child2))); }
    | child = Factor() { return child; }
    | "(" childConverter = QuantifierExpr() ")" { return new TCTLPathToStateConverter(childConverter); }
}

TCTLAbstractStateProperty Factor() :
{
    TCTLAbstractStateProperty thisProp;
    Token temp = null;
    Token transition = null;
    Token trace = null;
}
{
    (
    <TRUE> {thisProp = new TCTLTrueNode(); }
    | <FALSE> {thisProp = new TCTLFalseNode(); }
    | LOOKAHEAD(AtomicProposition()) thisProp = AtomicProposition()
    | LOOKAHEAD(PathScope()) thisProp = PathScope()
    | "(" thisProp = OrExpr() ")"
    | LOOKAHEAD(ParanthesesExpr()) {
    thisProp = new TCTLPathToStateConverter(QuantifierExpr()); }

    )
    { return thisProp; }
}

TCTLAbstractStateProperty PathScope() :
{
    TCTLAbstractStateProperty stateChild = null;
    Token trace = null;
}
{
    trace = <IDENT> "." stateChild = TransitionExpr() {return new HyperLTLPathScopeNode(stateChild, trace.image); }
}


TCTLAbstractStateProperty TransitionExpr() :
{
    TCTLAbstractStateProperty stateChild = null;
    Token temp = null;
    Token transition;
}
{
    temp = <IDENT> "." transition = <IDENT> {return new TCTLTransitionNode(temp == null ? "" : temp.image, transition.image); }
}

TCTLAbstractStateProperty AtomicProposition() :
{
TCTLAbstractStateProperty left = null;
TCTLAbstractStateProperty right = null;
String operator;
Token op;
}
{
    (
    left = AritmeticExpr() op = <OP> right = AritmeticExpr()
    )
    {
        operator = op.image;
        if(operator.equals("==")) operator = "=";
        return new TCTLAtomicPropositionNode(left, operator, right);
    }
}

TCTLAbstractStateProperty AritmeticExpr() :
    {
    TCTLAbstractStateProperty currentChild;
    ArrayList<TCTLAbstractStateProperty> terms = new ArrayList<TCTLAbstractStateProperty>();
    Token op;
    }
{
    currentChild = AritmeticMinusExpr()
    { terms.add(currentChild); }
    (
    op = <PLUS> currentChild = AritmeticMinusExpr()
    {
    terms.add(new AritmeticOperator(op.image));
    terms.add(currentChild);
    }
    )*
    { return terms.size() == 1 ? currentChild : new TCTLTermListNode(terms); }
}


TCTLAbstractStateProperty AritmeticMinusExpr() :
    {
    TCTLAbstractStateProperty currentChild;
    ArrayList<TCTLAbstractStateProperty> terms = new ArrayList<TCTLAbstractStateProperty>();
    Token op;
    }
{
    currentChild = AritmeticTerm()
    { terms.add(currentChild); }
    (
    op = <MINUS> currentChild = AritmeticTerm()
    {
    terms.add(new AritmeticOperator(op.image));
    terms.add(currentChild);
    }
    )*
    { return terms.size() == 1 ? currentChild : new TCTLTermListNode(terms); }
}

TCTLAbstractStateProperty AritmeticTerm() :
{
    TCTLAbstractStateProperty currentChild;
    ArrayList<TCTLAbstractStateProperty> factors = new ArrayList<TCTLAbstractStateProperty>();
    Token op;
}
{
    currentChild = AritmeticFactor()
    { factors.add(currentChild); }
    (
    op = <MULT> currentChild = AritmeticFactor()
    {
    factors.add(new AritmeticOperator(op.image));
    factors.add(currentChild);
    }
    )*
    { return factors.size() == 1 ? currentChild : new TCTLTermListNode(factors); }
}


TCTLAbstractStateProperty AritmeticFactor() :
{
    TCTLAbstractStateProperty thisProp;
    Token trace = null;
    Token num;
}
{
    (
    [ LOOKAHEAD(2) trace = <IDENT> "." ] thisProp = Place() { return new HyperLTLPathScopeNode(thisProp, trace.image); }
    | num = <NUM> { thisProp = new TCTLConstNode(Integer.parseInt(num.image)); }
    | "(" thisProp = AritmeticExpr() ")"
    )

    { return thisProp; }
}

TCTLAbstractStateProperty Place() :
{
    Token temp = null;
    Token place;
}
{
    temp = <IDENT> "." place = <IDENT> { return new TCTLPlaceNode(temp == null ? "" : temp.image, place.image); }
}
