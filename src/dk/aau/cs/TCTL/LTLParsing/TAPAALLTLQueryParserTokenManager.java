/* TAPAALLTLQueryParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. TAPAALLTLQueryParserTokenManager.java */
package dk.aau.cs.TCTL.LTLParsing;

/** Token Manager. */
@SuppressWarnings ("unused")
public class TAPAALLTLQueryParserTokenManager implements TAPAALLTLQueryParserConstants {

    /** Debug output. */
    public  java.io.PrintStream debugStream = System.out;
    /** Set debug output. */
    public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
    private final int jjStopStringLiteralDfa_0(int pos, long active0){
        switch (pos)
        {
            default :
                return -1;
        }
    }
    private final int jjStartNfa_0(int pos, long active0){
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }
    private int jjStopAtPos(int pos, int kind)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }
    private int jjMoveStringLiteralDfa0_0(){
        switch(curChar)
        {
            case 40:
                return jjStopAtPos(0, 22);
            case 41:
                return jjStopAtPos(0, 23);
            case 42:
                return jjStopAtPos(0, 14);
            case 43:
                return jjStopAtPos(0, 12);
            case 45:
                return jjStartNfaWithStates_0(0, 13, 48);
            case 46:
                return jjStopAtPos(0, 24);
            case 65:
                return jjStartNfaWithStates_0(0, 4, 50);
            case 70:
                return jjStartNfaWithStates_0(0, 6, 16);
            case 71:
                return jjStartNfaWithStates_0(0, 7, 50);
            case 85:
                return jjStartNfaWithStates_0(0, 5, 50);
            case 88:
                return jjStartNfaWithStates_0(0, 8, 50);
            default :
                return jjMoveNfa_0(3, 0);
        }
    }
    private int jjStartNfaWithStates_0(int pos, int kind, int state)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) { return pos + 1; }
        return jjMoveNfa_0(state, pos + 1);
    }
    private int jjMoveNfa_0(int startState, int curPos)
    {
        int startsAt = 0;
        jjnewStateCnt = 57;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;)
        {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64)
            {
                long l = 1L << curChar;
                do
                {
                    switch(jjstateSet[--i])
                    {
                        case 3:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                if (kind > 15)
                                    kind = 15;
                                { jjCheckNAdd(48); }
                            }
                            else if ((0x7000000000000000L & l) != 0L)
                            {
                                if (kind > 17)
                                    kind = 17;
                            }
                            else if (curChar == 33)
                            { jjCheckNAdd(52); }
                            else if (curChar == 45)
                            { jjCheckNAdd(48); }
                            else if (curChar == 38)
                                jjstateSet[jjnewStateCnt++] = 41;
                            if (curChar == 62)
                            { jjCheckNAdd(52); }
                            else if (curChar == 61)
                            { jjCheckNAdd(52); }
                            else if (curChar == 60)
                            { jjCheckNAdd(52); }
                            else if (curChar == 33)
                            {
                                if (kind > 11)
                                    kind = 11;
                            }
                            break;
                        case 16:
                        case 50:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 16)
                                kind = 16;
                        { jjCheckNAdd(50); }
                        break;
                        case 41:
                            if (curChar == 38 && kind > 10)
                                kind = 10;
                            break;
                        case 42:
                            if (curChar == 38)
                                jjstateSet[jjnewStateCnt++] = 41;
                            break;
                        case 46:
                            if (curChar == 33 && kind > 11)
                                kind = 11;
                            break;
                        case 47:
                            if (curChar == 45)
                            { jjCheckNAdd(48); }
                            break;
                        case 48:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 15)
                                kind = 15;
                        { jjCheckNAdd(48); }
                        break;
                        case 51:
                            if ((0x7000000000000000L & l) != 0L && kind > 17)
                                kind = 17;
                            break;
                        case 52:
                            if (curChar == 61 && kind > 17)
                                kind = 17;
                            break;
                        case 53:
                            if (curChar == 33)
                            { jjCheckNAdd(52); }
                            break;
                        case 54:
                            if (curChar == 60)
                            { jjCheckNAdd(52); }
                            break;
                        case 55:
                            if (curChar == 61)
                            { jjCheckNAdd(52); }
                            break;
                        case 56:
                            if (curChar == 62)
                            { jjCheckNAdd(52); }
                            break;
                        default : break;
                    }
                } while(i != startsAt);
            }
            else if (curChar < 128)
            {
                long l = 1L << (curChar & 077);
                do
                {
                    switch(jjstateSet[--i])
                    {
                        case 3:
                            if ((0x7fffffe87fffffeL & l) != 0L)
                            {
                                if (kind > 16)
                                    kind = 16;
                                { jjCheckNAdd(50); }
                            }
                            else if (curChar == 124)
                                jjstateSet[jjnewStateCnt++] = 36;
                            if (curChar == 110)
                                jjstateSet[jjnewStateCnt++] = 44;
                            else if (curChar == 97)
                                jjstateSet[jjnewStateCnt++] = 39;
                            else if (curChar == 111)
                                jjstateSet[jjnewStateCnt++] = 34;
                            else if (curChar == 68)
                                jjstateSet[jjnewStateCnt++] = 32;
                            else if (curChar == 100)
                                jjstateSet[jjnewStateCnt++] = 24;
                            else if (curChar == 70)
                                jjstateSet[jjnewStateCnt++] = 16;
                            else if (curChar == 102)
                                jjstateSet[jjnewStateCnt++] = 11;
                            else if (curChar == 84)
                                jjstateSet[jjnewStateCnt++] = 6;
                            else if (curChar == 116)
                                jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        case 16:
                            if ((0x7fffffe87fffffeL & l) != 0L)
                            {
                                if (kind > 16)
                                    kind = 16;
                                { jjCheckNAdd(50); }
                            }
                            if (curChar == 65)
                                jjstateSet[jjnewStateCnt++] = 15;
                            break;
                        case 0:
                            if (curChar == 101 && kind > 1)
                                kind = 1;
                            break;
                        case 1:
                            if (curChar == 117)
                                jjstateSet[jjnewStateCnt++] = 0;
                            break;
                        case 2:
                            if (curChar == 114)
                                jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 4:
                            if (curChar == 69 && kind > 1)
                                kind = 1;
                            break;
                        case 5:
                            if (curChar == 85)
                                jjstateSet[jjnewStateCnt++] = 4;
                            break;
                        case 6:
                            if (curChar == 82)
                                jjstateSet[jjnewStateCnt++] = 5;
                            break;
                        case 7:
                            if (curChar == 84)
                                jjstateSet[jjnewStateCnt++] = 6;
                            break;
                        case 8:
                            if (curChar == 101 && kind > 2)
                                kind = 2;
                            break;
                        case 9:
                            if (curChar == 115)
                                jjstateSet[jjnewStateCnt++] = 8;
                            break;
                        case 10:
                            if (curChar == 108)
                                jjstateSet[jjnewStateCnt++] = 9;
                            break;
                        case 11:
                            if (curChar == 97)
                                jjstateSet[jjnewStateCnt++] = 10;
                            break;
                        case 12:
                            if (curChar == 102)
                                jjstateSet[jjnewStateCnt++] = 11;
                            break;
                        case 13:
                            if (curChar == 69 && kind > 2)
                                kind = 2;
                            break;
                        case 14:
                            if (curChar == 83)
                                jjstateSet[jjnewStateCnt++] = 13;
                            break;
                        case 15:
                            if (curChar == 76)
                                jjstateSet[jjnewStateCnt++] = 14;
                            break;
                        case 17:
                            if (curChar == 70)
                                jjstateSet[jjnewStateCnt++] = 16;
                            break;
                        case 18:
                            if (curChar == 107 && kind > 3)
                                kind = 3;
                            break;
                        case 19:
                            if (curChar == 99)
                                jjstateSet[jjnewStateCnt++] = 18;
                            break;
                        case 20:
                            if (curChar == 111)
                                jjstateSet[jjnewStateCnt++] = 19;
                            break;
                        case 21:
                            if (curChar == 108)
                                jjstateSet[jjnewStateCnt++] = 20;
                            break;
                        case 22:
                            if (curChar == 100)
                                jjstateSet[jjnewStateCnt++] = 21;
                            break;
                        case 23:
                            if (curChar == 97)
                                jjstateSet[jjnewStateCnt++] = 22;
                            break;
                        case 24:
                            if (curChar == 101)
                                jjstateSet[jjnewStateCnt++] = 23;
                            break;
                        case 25:
                            if (curChar == 100)
                                jjstateSet[jjnewStateCnt++] = 24;
                            break;
                        case 26:
                            if (curChar == 75 && kind > 3)
                                kind = 3;
                            break;
                        case 27:
                            if (curChar == 67)
                                jjstateSet[jjnewStateCnt++] = 26;
                            break;
                        case 28:
                            if (curChar == 79)
                                jjstateSet[jjnewStateCnt++] = 27;
                            break;
                        case 29:
                            if (curChar == 76)
                                jjstateSet[jjnewStateCnt++] = 28;
                            break;
                        case 30:
                            if (curChar == 68)
                                jjstateSet[jjnewStateCnt++] = 29;
                            break;
                        case 31:
                            if (curChar == 65)
                                jjstateSet[jjnewStateCnt++] = 30;
                            break;
                        case 32:
                            if (curChar == 69)
                                jjstateSet[jjnewStateCnt++] = 31;
                            break;
                        case 33:
                            if (curChar == 68)
                                jjstateSet[jjnewStateCnt++] = 32;
                            break;
                        case 34:
                            if (curChar == 114 && kind > 9)
                                kind = 9;
                            break;
                        case 35:
                            if (curChar == 111)
                                jjstateSet[jjnewStateCnt++] = 34;
                            break;
                        case 36:
                            if (curChar == 124 && kind > 9)
                                kind = 9;
                            break;
                        case 37:
                            if (curChar == 124)
                                jjstateSet[jjnewStateCnt++] = 36;
                            break;
                        case 38:
                            if (curChar == 100 && kind > 10)
                                kind = 10;
                            break;
                        case 39:
                            if (curChar == 110)
                                jjstateSet[jjnewStateCnt++] = 38;
                            break;
                        case 40:
                            if (curChar == 97)
                                jjstateSet[jjnewStateCnt++] = 39;
                            break;
                        case 43:
                            if (curChar == 116 && kind > 11)
                                kind = 11;
                            break;
                        case 44:
                            if (curChar == 111)
                                jjstateSet[jjnewStateCnt++] = 43;
                            break;
                        case 45:
                            if (curChar == 110)
                                jjstateSet[jjnewStateCnt++] = 44;
                            break;
                        case 49:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 16)
                                kind = 16;
                        { jjCheckNAdd(50); }
                        break;
                        case 50:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 16)
                                kind = 16;
                        { jjCheckNAdd(50); }
                        break;
                        default : break;
                    }
                } while(i != startsAt);
            }
            else
            {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do
                {
                    switch(jjstateSet[--i])
                    {
                        default : break;
                    }
                } while(i != startsAt);
            }
            if (kind != 0x7fffffff)
            {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 57 - (jjnewStateCnt = startsAt)))
                return curPos;
            try { curChar = input_stream.readChar(); }
            catch(java.io.IOException e) { return curPos; }
        }
    }

    /** Token literal values. */
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, "\101", "\125", "\106", "\107", "\130", null, null, null,
        "\53", "\55", "\52", null, null, null, null, null, null, null, "\50", "\51", "\56", };
    protected Token jjFillToken()
    {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }
    static final int[] jjnextStates = {0
    };

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /** Get the next Token. */
    public Token getNextToken()
    {
        Token matchedToken;
        int curPos = 0;

        EOFLoop :
        for (;;)
        {
            try
            {
                curChar = input_stream.BeginToken();
            }
            catch(Exception e)
            {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            try { input_stream.backup(0);
                while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
                    curChar = input_stream.BeginToken();
            }
            catch (java.io.IOException e1) { continue EOFLoop; }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff)
            {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
                {
                    matchedToken = jjFillToken();
                    return matchedToken;
                }
                else
                {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try { input_stream.readChar(); input_stream.backup(1); }
            catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                }
                else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    void SkipLexicalActions(Token matchedToken)
    {
        switch(jjmatchedKind)
        {
            default :
                break;
        }
    }
    void MoreLexicalActions()
    {
        jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
        switch(jjmatchedKind)
        {
            default :
                break;
        }
    }
    void TokenLexicalActions(Token matchedToken)
    {
        switch(jjmatchedKind)
        {
            default :
                break;
        }
    }
    private void jjCheckNAdd(int state)
    {
        if (jjrounds[state] != jjround)
        {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }
    private void jjAddStates(int start, int end)
    {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }
    private void jjCheckNAddTwoStates(int state1, int state2)
    {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    /** Constructor. */
    public TAPAALLTLQueryParserTokenManager(SimpleCharStream stream){

        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

        input_stream = stream;
    }

    /** Constructor. */
    public TAPAALLTLQueryParserTokenManager (SimpleCharStream stream, int lexState){
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Reinitialise parser. */

    public void ReInit(SimpleCharStream stream)
    {


        jjmatchedPos =
            jjnewStateCnt =
                0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds()
    {
        int i;
        jjround = 0x80000001;
        for (i = 57; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream, int lexState)

    {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Switch to specified lex state. */
    public void SwitchTo(int lexState)
    {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }


    /** Lexer state names. */
    public static final String[] lexStateNames = {
        "DEFAULT",
    };

    /** Lex State array. */
    public static final int[] jjnewLexState = {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    };
    static final long[] jjtoToken = {
        0x1c3ffffL,
    };
    static final long[] jjtoSkip = {
        0x3c0000L,
    };
    static final long[] jjtoSpecial = {
        0x0L,
    };
    static final long[] jjtoMore = {
        0x0L,
    };
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[57];
    private final int[] jjstateSet = new int[2 * 57];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
