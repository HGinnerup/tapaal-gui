/* TAPAALLTLQueryParser.java */
/* Generated By:JavaCC: Do not edit this line. TAPAALLTLQueryParser.java */
package dk.aau.cs.TCTL.LTLParsing;

import java.io.StringReader;
import java.util.ArrayList;

import dk.aau.cs.TCTL.AritmeticOperator;
import dk.aau.cs.TCTL.TCTLTermListNode;
import dk.aau.cs.TCTL.TCTLPlaceNode;
import dk.aau.cs.TCTL.TCTLTransitionNode;
import dk.aau.cs.TCTL.TCTLConstNode;
import dk.aau.cs.TCTL.LTLANode;
import dk.aau.cs.TCTL.LTLAFNode;
import dk.aau.cs.TCTL.LTLAGNode;
import dk.aau.cs.TCTL.LTLAUNode;
import dk.aau.cs.TCTL.LTLAXNode;
import dk.aau.cs.TCTL.TCTLAbstractProperty;
import dk.aau.cs.TCTL.TCTLAbstractStateProperty;
import dk.aau.cs.TCTL.TCTLAbstractPathProperty;
import dk.aau.cs.TCTL.TCTLAndListNode;
import dk.aau.cs.TCTL.TCTLAtomicPropositionNode;
import dk.aau.cs.TCTL.TCTLFalseNode;
import dk.aau.cs.TCTL.TCTLNotNode;
import dk.aau.cs.TCTL.TCTLOrListNode;
import dk.aau.cs.TCTL.TCTLTrueNode;
import dk.aau.cs.TCTL.TCTLDeadlockNode;
import dk.aau.cs.TCTL.TCTLPathToStateConverter;
import dk.aau.cs.TCTL.TCTLStateToPathConverter;

public class TAPAALLTLQueryParser implements TAPAALLTLQueryParserConstants {

    private static final String ERROR_PARSING_QUERY_MESSAGE = "TAPAAL countered an error trying to parse the query";

    public static TCTLAbstractPathProperty parse(String query) throws ParseException {
        TAPAALLTLQueryParser parser = new TAPAALLTLQueryParser(new StringReader(query));
        return parser.AbstractPathProperty();
    }

    /** Root production. */
    final public TCTLAbstractPathProperty AbstractPathProperty() throws ParseException {TCTLAbstractPathProperty pathChild = null;
        TCTLAbstractStateProperty stateChild = null;
        jj_consume_token(A);
        pathChild = ParanthesesExpr();
        {if ("" != null) return new LTLANode(new TCTLPathToStateConverter(pathChild));}
        throw new Error("Missing return statement in function");
    }

    final public TCTLAbstractPathProperty ParanthesesExpr() throws ParseException {TCTLAbstractPathProperty pathChild = null;
        TCTLAbstractStateProperty stateChild = null;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 22:{
                jj_consume_token(22);
                pathChild = QuantifierExpr();
                jj_consume_token(23);
                {if ("" != null) return pathChild;}
                break;
            }
            default:
                jj_la1[0] = jj_gen;
                stateChild = OrExpr();
            {if ("" != null) return new TCTLStateToPathConverter(stateChild);}
        }
        throw new Error("Missing return statement in function");
    }

    final public TCTLAbstractPathProperty QuantifierExpr() throws ParseException {TCTLAbstractStateProperty child = null;
        TCTLAbstractStateProperty child2 = null;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case F:{
                jj_consume_token(F);
                child = OrExpr();
                {if ("" != null) return new LTLAFNode(child);}
                break;
            }
            case G:{
                jj_consume_token(G);
                child = OrExpr();
                {if ("" != null) return new LTLAGNode(child);}
                break;
            }
            case TRUE:
            case FALSE:
            case DEADLOCK:
            case U:
            case OR:
            case AND:
            case NOT:
            case NUM:
            case IDENT:
            case 22:{
                child = OrExpr();
                jj_consume_token(U);
                child2 = OrExpr();
                {if ("" != null) return new LTLAUNode(child, child2);}
                break;
            }
            case X:{
                jj_consume_token(X);
                child = OrExpr();
                {if ("" != null) return new LTLAXNode(child);}
                break;
            }
            default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public TCTLAbstractStateProperty OrExpr() throws ParseException {TCTLAbstractStateProperty currentChild;
        ArrayList<TCTLAbstractStateProperty> disjunctions = new ArrayList<TCTLAbstractStateProperty>();
        currentChild = AndExpr();
        disjunctions.add(currentChild);
        label_1:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case OR:{
                    ;
                    break;
                }
                default:
                    jj_la1[2] = jj_gen;
                    break label_1;
            }
            jj_consume_token(OR);
            currentChild = AndExpr();
            disjunctions.add(currentChild);
        }
        {if ("" != null) return disjunctions.size() == 1 ? currentChild : new TCTLOrListNode(disjunctions);}
        throw new Error("Missing return statement in function");
    }

    final public TCTLAbstractStateProperty AndExpr() throws ParseException {TCTLAbstractStateProperty currentChild;
        ArrayList<TCTLAbstractStateProperty> conjunctions = new ArrayList<TCTLAbstractStateProperty>();
        currentChild = NotExpr();
        conjunctions.add(currentChild);
        label_2:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case AND:{
                    ;
                    break;
                }
                default:
                    jj_la1[3] = jj_gen;
                    break label_2;
            }
            jj_consume_token(AND);
            currentChild = NotExpr();
            conjunctions.add(currentChild);
        }
        {if ("" != null) return conjunctions.size() == 1 ? currentChild : new TCTLAndListNode(conjunctions);}
        throw new Error("Missing return statement in function");
    }

    final public TCTLAbstractStateProperty NotExpr() throws ParseException {TCTLAbstractStateProperty child;
        TCTLAbstractPathProperty childConverter;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NOT:{
                jj_consume_token(NOT);
                jj_consume_token(22);
                child = OrExpr();
                jj_consume_token(23);
                {if ("" != null) return new TCTLNotNode(child);}
                break;
            }
            default:
                jj_la1[4] = jj_gen;
                child = Factor();
            {if ("" != null) return child;}
        }
        throw new Error("Missing return statement in function");
    }

    final public TCTLAbstractStateProperty Factor() throws ParseException {TCTLAbstractStateProperty thisProp;
        Token temp = null;
        Token transition;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case TRUE:{
                jj_consume_token(TRUE);
                thisProp = new TCTLTrueNode();
                break;
            }
            case FALSE:{
                jj_consume_token(FALSE);
                thisProp = new TCTLFalseNode();
                break;
            }
            case DEADLOCK:{
                jj_consume_token(DEADLOCK);
                thisProp = new TCTLDeadlockNode();
                break;
            }
            default:
                jj_la1[5] = jj_gen;
                if (jj_2_2(2147483647)) {
                    thisProp = AtomicProposition();
                } else {
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case IDENT:{
                            if (jj_2_1(2)) {
                                temp = jj_consume_token(IDENT);
                                jj_consume_token(24);
                            } else {
                                ;
                            }
                            transition = jj_consume_token(IDENT);
                            thisProp = new TCTLTransitionNode(temp == null ? "" : temp.image, transition.image);
                            break;
                        }
                        case 22:{
                            jj_consume_token(22);
                            thisProp = OrExpr();
                            jj_consume_token(23);
                            break;
                        }
                        default:
                            jj_la1[6] = jj_gen;
                            if (jj_2_3(2147483647)) {
                                thisProp = new TCTLPathToStateConverter(AbstractPathProperty());
                            } else {
                                jj_consume_token(-1);
                                throw new ParseException();
                            }
                    }
                }
        }
        {if ("" != null) return thisProp;}
        throw new Error("Missing return statement in function");
    }

    final public TCTLAbstractStateProperty AtomicProposition() throws ParseException {TCTLAbstractStateProperty left;
        TCTLAbstractStateProperty right;
        Token op;
        left = AritmeticExpr();
        op = jj_consume_token(OP);
        right = AritmeticExpr();
        {if ("" != null) return new TCTLAtomicPropositionNode(left, op.image, right);}
        throw new Error("Missing return statement in function");
    }

    final public TCTLAbstractStateProperty AritmeticExpr() throws ParseException {TCTLAbstractStateProperty currentChild;
        ArrayList<TCTLAbstractStateProperty> terms = new ArrayList<TCTLAbstractStateProperty>();
        Token op;
        currentChild = AritmeticMinusExpr();
        terms.add(currentChild);
        label_3:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case PLUS:{
                    ;
                    break;
                }
                default:
                    jj_la1[7] = jj_gen;
                    break label_3;
            }
            op = jj_consume_token(PLUS);
            currentChild = AritmeticMinusExpr();
            terms.add(new AritmeticOperator(op.image));
            terms.add(currentChild);
        }
        {if ("" != null) return terms.size() == 1 ? currentChild : new TCTLTermListNode(terms);}
        throw new Error("Missing return statement in function");
    }

    final public TCTLAbstractStateProperty AritmeticMinusExpr() throws ParseException {TCTLAbstractStateProperty currentChild;
        ArrayList<TCTLAbstractStateProperty> terms = new ArrayList<TCTLAbstractStateProperty>();
        Token op;
        currentChild = AritmeticTerm();
        terms.add(currentChild);
        label_4:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case MINUS:{
                    ;
                    break;
                }
                default:
                    jj_la1[8] = jj_gen;
                    break label_4;
            }
            op = jj_consume_token(MINUS);
            currentChild = AritmeticTerm();
            terms.add(new AritmeticOperator(op.image));
            terms.add(currentChild);
        }
        {if ("" != null) return terms.size() == 1 ? currentChild : new TCTLTermListNode(terms);}
        throw new Error("Missing return statement in function");
    }

    final public TCTLAbstractStateProperty AritmeticTerm() throws ParseException {TCTLAbstractStateProperty currentChild;
        ArrayList<TCTLAbstractStateProperty> factors = new ArrayList<TCTLAbstractStateProperty>();
        Token op;
        currentChild = AritmeticFactor();
        factors.add(currentChild);
        label_5:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case MULT:{
                    ;
                    break;
                }
                default:
                    jj_la1[9] = jj_gen;
                    break label_5;
            }
            op = jj_consume_token(MULT);
            currentChild = AritmeticFactor();
            factors.add(new AritmeticOperator(op.image));
            factors.add(currentChild);
        }
        {if ("" != null) return factors.size() == 1 ? currentChild : new TCTLTermListNode(factors);}
        throw new Error("Missing return statement in function");
    }

    final public TCTLAbstractStateProperty AritmeticFactor() throws ParseException {TCTLAbstractStateProperty thisProp;
        Token temp = null;
        Token place;
        Token op;
        Token num;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IDENT:{
                if (jj_2_4(2)) {
                    temp = jj_consume_token(IDENT);
                    jj_consume_token(24);
                } else {
                    ;
                }
                place = jj_consume_token(IDENT);
                thisProp = new TCTLPlaceNode(temp == null ? "" : temp.image, place.image);
                break;
            }
            case NUM:{
                num = jj_consume_token(NUM);
                thisProp = new TCTLConstNode(Integer.parseInt(num.image));
                break;
            }
            case 22:{
                jj_consume_token(22);
                thisProp = AritmeticExpr();
                jj_consume_token(23);
                break;
            }
            default:
                jj_la1[10] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {if ("" != null) return thisProp;}
        throw new Error("Missing return statement in function");
    }

    private boolean jj_2_1(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return (!jj_3_1()); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(0, xla); }
    }

    private boolean jj_2_2(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return (!jj_3_2()); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(1, xla); }
    }

    private boolean jj_2_3(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return (!jj_3_3()); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(2, xla); }
    }

    private boolean jj_2_4(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return (!jj_3_4()); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(3, xla); }
    }

    private boolean jj_3R_AritmeticTerm_278_5_14()
    {
        if (jj_3R_AritmeticFactor_299_5_18()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_AritmeticTerm_281_5_19()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3R_AndExpr_178_5_30()
    {
        if (jj_scan_token(AND)) return true;
        if (jj_3R_NotExpr_190_1_29()) return true;
        return false;
    }

    private boolean jj_3R_AndExpr_175_5_24()
    {
        if (jj_3R_NotExpr_190_1_29()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_AndExpr_178_5_30()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3R_AritmeticMinusExpr_262_5_15()
    {
        if (jj_scan_token(MINUS)) return true;
        if (jj_3R_AritmeticTerm_278_5_14()) return true;
        return false;
    }

    private boolean jj_3R_AritmeticMinusExpr_259_5_10()
    {
        if (jj_3R_AritmeticTerm_278_5_14()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_AritmeticMinusExpr_262_5_15()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3R_OrExpr_163_5_25()
    {
        if (jj_scan_token(OR)) return true;
        if (jj_3R_AndExpr_175_5_24()) return true;
        return false;
    }

    private boolean jj_3R_OrExpr_160_5_17()
    {
        if (jj_3R_AndExpr_175_5_24()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_OrExpr_163_5_25()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3R_QuantifierExpr_151_7_23()
    {
        if (jj_scan_token(X)) return true;
        if (jj_3R_OrExpr_160_5_17()) return true;
        return false;
    }

    private boolean jj_3R_QuantifierExpr_150_7_22()
    {
        if (jj_3R_OrExpr_160_5_17()) return true;
        if (jj_scan_token(U)) return true;
        if (jj_3R_OrExpr_160_5_17()) return true;
        return false;
    }

    private boolean jj_3R_QuantifierExpr_149_7_21()
    {
        if (jj_scan_token(G)) return true;
        if (jj_3R_OrExpr_160_5_17()) return true;
        return false;
    }

    private boolean jj_3R_QuantifierExpr_148_5_16()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_QuantifierExpr_148_5_20()) {
            jj_scanpos = xsp;
            if (jj_3R_QuantifierExpr_149_7_21()) {
                jj_scanpos = xsp;
                if (jj_3R_QuantifierExpr_150_7_22()) {
                    jj_scanpos = xsp;
                    if (jj_3R_QuantifierExpr_151_7_23()) return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_QuantifierExpr_148_5_20()
    {
        if (jj_scan_token(F)) return true;
        if (jj_3R_OrExpr_160_5_17()) return true;
        return false;
    }

    private boolean jj_3R_AritmeticExpr_243_5_11()
    {
        if (jj_scan_token(PLUS)) return true;
        if (jj_3R_AritmeticMinusExpr_259_5_10()) return true;
        return false;
    }

    private boolean jj_3R_AritmeticExpr_240_5_8()
    {
        if (jj_3R_AritmeticMinusExpr_259_5_10()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_AritmeticExpr_243_5_11()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private boolean jj_3R_ParanthesesExpr_139_7_13()
    {
        if (jj_3R_OrExpr_160_5_17()) return true;
        return false;
    }

    private boolean jj_3R_ParanthesesExpr_138_5_12()
    {
        if (jj_scan_token(22)) return true;
        if (jj_3R_QuantifierExpr_148_5_16()) return true;
        if (jj_scan_token(23)) return true;
        return false;
    }

    private boolean jj_3R_ParanthesesExpr_138_5_9()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_ParanthesesExpr_138_5_12()) {
            jj_scanpos = xsp;
            if (jj_3R_ParanthesesExpr_139_7_13()) return true;
        }
        return false;
    }

    private boolean jj_3R_AtomicProposition_225_5_6()
    {
        if (jj_3R_AritmeticExpr_240_5_8()) return true;
        if (jj_scan_token(OP)) return true;
        if (jj_3R_AritmeticExpr_240_5_8()) return true;
        return false;
    }

    private boolean jj_3R_AbstractPathProperty_129_5_7()
    {
        if (jj_scan_token(A)) return true;
        if (jj_3R_ParanthesesExpr_138_5_9()) return true;
        return false;
    }

    private boolean jj_3_3()
    {
        if (jj_3R_AbstractPathProperty_129_5_7()) return true;
        return false;
    }

    private boolean jj_3_2()
    {
        if (jj_3R_AtomicProposition_225_5_6()) return true;
        return false;
    }

    private boolean jj_3R_Factor_211_7_41()
    {
        return false;
    }

    private boolean jj_3R_Factor_210_7_40()
    {
        if (jj_scan_token(22)) return true;
        if (jj_3R_OrExpr_160_5_17()) return true;
        if (jj_scan_token(23)) return true;
        return false;
    }

    private boolean jj_3_1()
    {
        if (jj_scan_token(IDENT)) return true;
        if (jj_scan_token(24)) return true;
        return false;
    }

    private boolean jj_3R_Factor_208_7_39()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_1()) jj_scanpos = xsp;
        if (jj_scan_token(IDENT)) return true;
        return false;
    }

    private boolean jj_3R_AritmeticFactor_302_7_28()
    {
        if (jj_scan_token(22)) return true;
        if (jj_3R_AritmeticExpr_240_5_8()) return true;
        if (jj_scan_token(23)) return true;
        return false;
    }

    private boolean jj_3R_Factor_206_7_38()
    {
        if (jj_3R_AtomicProposition_225_5_6()) return true;
        return false;
    }

    private boolean jj_3R_AritmeticFactor_301_7_27()
    {
        if (jj_scan_token(NUM)) return true;
        return false;
    }

    private boolean jj_3R_Factor_205_7_37()
    {
        if (jj_scan_token(DEADLOCK)) return true;
        return false;
    }

    private boolean jj_3_4()
    {
        if (jj_scan_token(IDENT)) return true;
        if (jj_scan_token(24)) return true;
        return false;
    }

    private boolean jj_3R_Factor_204_7_36()
    {
        if (jj_scan_token(FALSE)) return true;
        return false;
    }

    private boolean jj_3R_AritmeticFactor_300_5_26()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_4()) jj_scanpos = xsp;
        if (jj_scan_token(IDENT)) return true;
        return false;
    }

    private boolean jj_3R_AritmeticFactor_299_5_18()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_AritmeticFactor_300_5_26()) {
            jj_scanpos = xsp;
            if (jj_3R_AritmeticFactor_301_7_27()) {
                jj_scanpos = xsp;
                if (jj_3R_AritmeticFactor_302_7_28()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_Factor_202_5_34()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_Factor_203_1_35()) {
            jj_scanpos = xsp;
            if (jj_3R_Factor_204_7_36()) {
                jj_scanpos = xsp;
                if (jj_3R_Factor_205_7_37()) {
                    jj_scanpos = xsp;
                    if (jj_3R_Factor_206_7_38()) {
                        jj_scanpos = xsp;
                        if (jj_3R_Factor_208_7_39()) {
                            jj_scanpos = xsp;
                            if (jj_3R_Factor_210_7_40()) {
                                jj_scanpos = xsp;
                                if (jj_3R_Factor_211_7_41()) return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_Factor_203_1_35()
    {
        if (jj_scan_token(TRUE)) return true;
        return false;
    }

    private boolean jj_3R_NotExpr_192_7_33()
    {
        if (jj_scan_token(22)) return true;
        if (jj_3R_AbstractPathProperty_129_5_7()) return true;
        if (jj_scan_token(23)) return true;
        return false;
    }

    private boolean jj_3R_NotExpr_191_7_32()
    {
        if (jj_3R_Factor_202_5_34()) return true;
        return false;
    }

    private boolean jj_3R_NotExpr_190_1_29()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_NotExpr_190_1_31()) {
            jj_scanpos = xsp;
            if (jj_3R_NotExpr_191_7_32()) {
                jj_scanpos = xsp;
                if (jj_3R_NotExpr_192_7_33()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_NotExpr_190_1_31()
    {
        if (jj_scan_token(NOT)) return true;
        if (jj_scan_token(22)) return true;
        if (jj_3R_OrExpr_160_5_17()) return true;
        if (jj_scan_token(23)) return true;
        return false;
    }

    private boolean jj_3R_AritmeticTerm_281_5_19()
    {
        if (jj_scan_token(MULT)) return true;
        if (jj_3R_AritmeticFactor_299_5_18()) return true;
        return false;
    }

    /** Generated Token Manager. */
    public TAPAALLTLQueryParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[11];
    static private int[] jj_la1_0;
    static {
        jj_la1_init_0();
    }
    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] {0x400000,0x418fee,0x200,0x400,0x800,0xe,0x410000,0x1000,0x2000,0x4000,0x418000,};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[4];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public TAPAALLTLQueryParser(java.io.InputStream stream) {
        this(stream, null);
    }
    /** Constructor with InputStream and supplied encoding */
    public TAPAALLTLQueryParser(java.io.InputStream stream, String encoding) {
        try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source = new TAPAALLTLQueryParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 11; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }
    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 11; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor. */
    public TAPAALLTLQueryParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new TAPAALLTLQueryParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 11; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        if (jj_input_stream == null) {
            jj_input_stream = new SimpleCharStream(stream, 1, 1);
        } else {
            jj_input_stream.ReInit(stream, 1, 1);
        }
        if (token_source == null) {
            token_source = new TAPAALLTLQueryParserTokenManager(jj_input_stream);
        }

        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 11; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor with generated Token Manager. */
    public TAPAALLTLQueryParser(TAPAALLTLQueryParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 11; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(TAPAALLTLQueryParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 11; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
        @Override
        public Throwable fillInStackTrace() {
            return this;
        }
    }
    static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0; Token tok = token;
            while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }


    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt=token.next) == null)
            return (jj_ntk = (token.next=token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }

        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];

            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }

            for (int[] oldentry : jj_expentries) {
                if (oldentry.length == jj_expentry.length) {
                    boolean isMatched = true;

                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            isMatched = false;
                            break;
                        }

                    }
                    if (isMatched) {
                        jj_expentries.add(jj_expentry);
                        break;
                    }
                }
            }

            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[25];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 11; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1<<j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 25; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    private boolean trace_enabled;

    /** Trace enabled. */
    final public boolean trace_enabled() {
        return trace_enabled;
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 4; i++) {
            try {
                JJCalls p = jj_2_rtns[i];

                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0: jj_3_1(); break;
                            case 1: jj_3_2(); break;
                            case 2: jj_3_3(); break;
                            case 3: jj_3_4(); break;
                        }
                    }
                    p = p.next;
                } while (p != null);

            } catch(LookaheadSuccess ls) { }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) { p = p.next = new JJCalls(); break; }
            p = p.next;
        }

        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
