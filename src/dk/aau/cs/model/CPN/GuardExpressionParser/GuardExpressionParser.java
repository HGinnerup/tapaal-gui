/* GuardExpressionParser.java */
/* Generated By:JavaCC: Do not edit this line. GuardExpressionParser.java */
package dk.aau.cs.model.CPN.GuardExpressionParser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.Vector;
import dk.aau.cs.model.CPN.ColorType;
import dk.aau.cs.model.CPN.Expressions.*;
import dk.aau.cs.model.CPN.ProductType;import dk.aau.cs.model.tapn.TimedArcPetriNetNetwork;
import dk.aau.cs.model.CPN.Color;


public class GuardExpressionParser implements GuardExpressionParserConstants {

        private static final String ERROR_PARSING_QUERY_MESSAGE = "TAPAAL countered an error trying to parse the expression";
    private static TimedArcPetriNetNetwork network;
        public static GuardExpression parse(String expression, TimedArcPetriNetNetwork inputNetwork) throws ParseException {
            network = inputNetwork;
                GuardExpressionParser parser = new GuardExpressionParser(new StringReader(expression));
                return parser.OrExpr();
        }

  final public GuardExpression OrExpr() throws ParseException {GuardExpression left = null;
        GuardExpression right = null;
    left = AndExpr();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:{
      jj_consume_token(OR);
      right = AndExpr();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
{if ("" != null) return right == null ? left : new OrExpression(left,right);}
    throw new Error("Missing return statement in function");
}

  final public GuardExpression AndExpr() throws ParseException {GuardExpression left = null;
        GuardExpression right = null;
    left = NotExpr();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      right = NotExpr();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
{if ("" != null) return right == null ? left : new AndExpression(left,right);}
    throw new Error("Missing return statement in function");
}

  final public GuardExpression NotExpr() throws ParseException {GuardExpression currentChild;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      jj_consume_token(15);
      currentChild = OrExpr();
      jj_consume_token(16);
{if ("" != null) return new NotExpression(currentChild);}
      break;
      }
    case NUM:
    case IDENT:
    case 15:{
      currentChild = term();
{if ("" != null) return currentChild;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public GuardExpression term() throws ParseException {GuardExpression childExpression;
    if (jj_2_1(2147483647)) {
      childExpression = parseOperatorExpression();
{if ("" != null) return childExpression;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 15:{
        jj_consume_token(15);
        childExpression = OrExpr();
        jj_consume_token(16);
{if ("" != null) return childExpression;}
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public GuardExpression parseOperatorExpression() throws ParseException {ColorExpression left;
        ColorExpression right;
        Token op;
    left = ColorExpression();
    op = jj_consume_token(OP);
    right = ColorExpression();
if(!left.isComparable(right)){
           {if (true) throw new ParseException(left.toString() + " is not comparable to " + right.toString());}
       }
       if(op.image.equals("<")) {if ("" != null) return new LessThanExpression(left,right);}
       else if(op.image.equals("<=")) {if ("" != null) return new LessThanEqExpression(left,right);}
       else if(op.image.equals(">")) {if ("" != null) return new GreaterThanExpression(left,right);}
       else if(op.image.equals(">=")) {if ("" != null) return new GreaterThanEqExpression(left,right);}
       else if(op.image.equals("=")) {if ("" != null) return new EqualityExpression(left,right);}
       else if(op.image.equals("!=")) {if ("" != null) return new InequalityExpression(left,right);}
       else {if ("" != null) return null;}
    throw new Error("Missing return statement in function");
}

  final public ColorExpression ColorExpression() throws ParseException {ColorExpression subexpression;

    Vector<ColorExpression> expressions = new Vector<ColorExpression>();
    ArrayList<String> succPreds= new ArrayList<String>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 15:{
      jj_consume_token(15);
      subexpression = Element();
expressions.add(subexpression);
      label_1:
      while (true) {
        jj_consume_token(17);
        subexpression = Element();
expressions.add(subexpression);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 17:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(16);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 18:
        case 19:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 18:{
          jj_consume_token(18);
succPreds.add("++");
          break;
          }
        case 19:{
          jj_consume_token(19);
succPreds.add("--");
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
ColorExpression cexpr = new TupleExpression(expressions);
      //assumes single level producttypes
      boolean colorTypeExists = false;
      for(ColorType ct: network.colorTypes()){
          if(ct instanceof ProductType){
              if(((ProductType)ct).containsTypes(cexpr.getColorTypes())){
                colorTypeExists = true;
                break;
              }
          }
      }
      if(!colorTypeExists){
          {if (true) throw new ParseException("We could not find an existing colortype for the color " + cexpr.toString());}
      }
      for(String s : succPreds){
           if(s.equals("++")){
               cexpr = new SuccessorExpression(cexpr);
           } else{
               cexpr = new PredecessorExpression(cexpr);
           }
      }

      {if ("" != null) return cexpr;}
      break;
      }
    case NUM:
    case IDENT:{
      subexpression = Element();
{if ("" != null) return subexpression;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ColorExpression Element() throws ParseException {Token name;
    Vector<String> succPreds= new Vector<String>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENT:{
      name = jj_consume_token(IDENT);
      break;
      }
    case NUM:{
      name = jj_consume_token(NUM);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 18:
      case 19:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 18:{
        jj_consume_token(18);
succPreds.add("++");
        break;
        }
      case 19:{
        jj_consume_token(19);
succPreds.add("--");
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
ColorExpression cexpr;

        Color c = network.getColorByName(name.toString());
        if(c != null){
            cexpr = new UserOperatorExpression(c);
        } else if(network.getVariableByName(name.toString()) != null){
            cexpr = new VariableExpression(network.getVariableByName(name.toString()));
        } else{
            {if (true) throw new ParseException("Could not parse " + name + " as the name could not be found");}
        }
        for(String s : succPreds){
            if(s.equals("++")){
                cexpr = new SuccessorExpression(cexpr);
            } else{
                cexpr = new PredecessorExpression(cexpr);
            }
        }

        {if ("" != null) return cexpr;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_parseOperatorExpression_132_5_4()
 {
    if (jj_3R_ColorExpression_156_5_5()) return true;
    if (jj_scan_token(OP)) return true;
    if (jj_3R_ColorExpression_156_5_5()) return true;
    return false;
  }

  private boolean jj_3R_ColorExpression_156_141_12()
 {
    if (jj_scan_token(18)) return true;
    return false;
  }

  private boolean jj_3R_ColorExpression_156_141_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ColorExpression_156_141_12()) {
    jj_scanpos = xsp;
    if (jj_3R_ColorExpression_156_170_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_Element_189_38_14()
 {
    if (jj_scan_token(18)) return true;
    return false;
  }

  private boolean jj_3R_Element_189_38_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Element_189_38_14()) {
    jj_scanpos = xsp;
    if (jj_3R_Element_189_67_15()) return true;
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_parseOperatorExpression_132_5_4()) return true;
    return false;
  }

  private boolean jj_3R_ColorExpression_156_70_9()
 {
    if (jj_scan_token(17)) return true;
    if (jj_3R_Element_189_5_8()) return true;
    return false;
  }

  private boolean jj_3R_Element_189_5_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Element_189_38_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ColorExpression_182_7_7()
 {
    if (jj_3R_Element_189_5_8()) return true;
    return false;
  }

  private boolean jj_3R_ColorExpression_156_170_13()
 {
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3R_Element_189_67_15()
 {
    if (jj_scan_token(19)) return true;
    return false;
  }

  private boolean jj_3R_ColorExpression_156_5_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ColorExpression_156_5_6()) {
    jj_scanpos = xsp;
    if (jj_3R_ColorExpression_182_7_7()) return true;
    }
    return false;
  }

  private boolean jj_3R_ColorExpression_156_5_6()
 {
    if (jj_scan_token(15)) return true;
    if (jj_3R_Element_189_5_8()) return true;
    Token xsp;
    if (jj_3R_ColorExpression_156_70_9()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ColorExpression_156_70_9()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(16)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ColorExpression_156_141_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public GuardExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x2,0x4,0x8308,0x8000,0x20000,0xc0000,0xc0000,0x8300,0x300,0xc0000,0xc0000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public GuardExpressionParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GuardExpressionParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new GuardExpressionParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public GuardExpressionParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new GuardExpressionParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new GuardExpressionParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public GuardExpressionParser(GuardExpressionParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GuardExpressionParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[20];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 11; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 20; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 1; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
